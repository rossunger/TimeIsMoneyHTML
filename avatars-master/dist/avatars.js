/**
 * Modules in this bundle
 * @license
 *
 * @dicebear/avatars:
 *   license: MIT (http://opensource.org/licenses/MIT)
 *   author: Florian KÃ¶rner <contact@dicebear.com>
 *   homepage: https://github.com/DiceBear/avatars#readme
 *   version: 2.0.0
 *
 * pure-color:
 *   license: MIT (http://opensource.org/licenses/MIT)
 *   author: Nick Williams
 *   version: 1.3.0
 *
 * seedrandom:
 *   license: MIT (http://opensource.org/licenses/MIT)
 *   author: David Bau
 *   homepage: http://davidbau.com/archives/2010/01/30/random_seeds_coded_hints_and_quintillions.html
 *   version: 2.4.3
 *
 * This header is generated by licensify (https://github.com/twada/licensify)
 */
(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.Avatars = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var avatar_1 = require("./model/avatar");
var canvas_1 = require("./helper/canvas");
var random_1 = require("./helper/random");
var male_1 = require("./spriteSet/male");
var female_1 = require("./spriteSet/female");
var identicon_1 = require("./spriteSet/identicon");
var Avatars = /** @class */ (function () {
    /**
     * @param spriteSet
     * @param options
     */
    function Avatars(spriteSet) {
        this.spriteSet = spriteSet;
    }
    /**
     * Creates an avatar
     *
     * @param seed
     * @param options
     */
    Avatars.prototype.create = function (seed) {
        return __awaiter(this, void 0, void 0, function () {
            var random, spriteSet, spriteSetKeys, loadAllSprites, images, canvas, context, canvasSprites;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        random = seed instanceof random_1.default ? seed : new random_1.default(seed);
                        return [4 /*yield*/, this.spriteSet(random)];
                    case 1:
                        spriteSet = _a.sent();
                        spriteSetKeys = Object.keys(spriteSet);
                        loadAllSprites = spriteSetKeys.map(function (key) { return spriteSet[key].load(); });
                        return [4 /*yield*/, Promise.all(loadAllSprites)];
                    case 2:
                        images = _a.sent();
                        canvas = canvas_1.createCanvas();
                        context = canvas.getContext('2d');
                        canvas.width = images[0].height;
                        canvas.height = images[0].height;
                        return [4 /*yield*/, Promise.all(spriteSetKeys.map(function (key) { return spriteSet[key].create(random); }))];
                    case 3:
                        canvasSprites = _a.sent();
                        canvasSprites.forEach(function (canvasSprite) {
                            context.drawImage(canvasSprite, 0, 0, canvas.width, canvas.height);
                        });
                        return [2 /*return*/, new avatar_1.default(canvas)];
                }
            });
        });
    };
    Avatars.SPRITE_SETS = {
        male: male_1.default,
        female: female_1.default,
        identicon: identicon_1.default
    };
    return Avatars;
}());
exports.default = Avatars;

},{"./helper/canvas":5,"./helper/random":6,"./model/avatar":8,"./spriteSet/female":12,"./spriteSet/identicon":13,"./spriteSet/male":14}],2:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var colorSet_1 = require("../../../model/colorSet");
/**
 * Ensures that the selected color is lighter than a reference color.
 */
var BrighterOrDarkerThan = /** @class */ (function (_super) {
    __extends(BrighterOrDarkerThan, _super);
    function BrighterOrDarkerThan(colors, reference, difference) {
        var _this = _super.call(this, colors) || this;
        _this.reference = reference;
        _this.difference = difference;
        return _this;
    }
    BrighterOrDarkerThan.prototype.getColor = function (random) {
        var color = _super.prototype.getColor.call(this, random);
        var referenceColor = this.reference.getColor(random);
        var colorHsl = color.hsl;
        var referenceColorHsl = referenceColor.hsl;
        if (colorHsl[2] >= referenceColorHsl[2] + this.difference) {
            return color;
        }
        colorHsl[2] = colorHsl[2] + this.difference;
        if (colorHsl[2] > 100) {
            colorHsl[2] = 100;
        }
        var brighterColor = color.clone();
        brighterColor.hsl = colorHsl;
        return brighterColor;
    };
    return BrighterOrDarkerThan;
}(colorSet_1.default));
exports.default = BrighterOrDarkerThan;

},{"../../../model/colorSet":10}],3:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var colorSet_1 = require("../../../model/colorSet");
/**
 * Ensures that the selected color is darker than a reference color.
 */
var BrighterOrDarkerThan = /** @class */ (function (_super) {
    __extends(BrighterOrDarkerThan, _super);
    function BrighterOrDarkerThan(colors, reference, difference) {
        var _this = _super.call(this, colors) || this;
        _this.reference = reference;
        _this.difference = difference;
        return _this;
    }
    BrighterOrDarkerThan.prototype.getColor = function (random) {
        var color = _super.prototype.getColor.call(this, random);
        var referenceColor = this.reference.getColor(random);
        var colorHsl = color.hsl;
        var referenceColorHsl = referenceColor.hsl;
        if (colorHsl[2] <= referenceColorHsl[2] - this.difference) {
            return color;
        }
        colorHsl[2] = colorHsl[2] - this.difference;
        if (colorHsl[2] < 0) {
            colorHsl[2] = 0;
        }
        var darkerColor = color.clone();
        darkerColor.hsl = colorHsl;
        return darkerColor;
    };
    return BrighterOrDarkerThan;
}(colorSet_1.default));
exports.default = BrighterOrDarkerThan;

},{"../../../model/colorSet":10}],4:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var colorSet_1 = require("../../../model/colorSet");
var brighter_1 = require("./brighter");
var darker_1 = require("./darker");
/**
 * Ensures that the selected color is darker or brighter than a reference color.
 */
var BrighterOrDarkerThan = /** @class */ (function (_super) {
    __extends(BrighterOrDarkerThan, _super);
    /**
     * @param colors
     * @param reference
     * @param difference
     */
    function BrighterOrDarkerThan(colors, reference, difference) {
        var _this = _super.call(this, colors) || this;
        _this.reference = reference;
        _this.brighter = new brighter_1.default(colors, reference, difference);
        _this.darker = new darker_1.default(colors, reference, difference);
        return _this;
    }
    /**
     * Returns a color
     *
     * @param random
     */
    BrighterOrDarkerThan.prototype.getColor = function (random) {
        var color = _super.prototype.getColor.call(this, random);
        var referenceColor = this.reference.getColor(random);
        var colorHsl = color.hsl;
        var referenceColorHsl = referenceColor.hsl;
        if (colorHsl[2] <= referenceColorHsl[2]) {
            return this.brighter.getColor(random);
        }
        else {
            return this.darker.getColor(random);
        }
    };
    return BrighterOrDarkerThan;
}(colorSet_1.default));
exports.default = BrighterOrDarkerThan;

},{"../../../model/colorSet":10,"./brighter":2,"./darker":3}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function createCanvas() {
    return document.createElement('canvas');
}
exports.createCanvas = createCanvas;
function createImage() {
    return new Image();
}
exports.createImage = createImage;

},{}],6:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var seedrandom = require("seedrandom/seedrandom");
var Random = /** @class */ (function () {
    function Random(seed) {
        this.seed = seed;
        this.prng = seedrandom(seed);
    }
    Random.prototype.bool = function (likelihood) {
        if (likelihood === void 0) { likelihood = 50; }
        return this.prng() * 100 < likelihood;
    };
    Random.prototype.integer = function (min, max) {
        return Math.floor(this.prng() * (max - min + 1) + min);
    };
    Random.prototype.pickone = function (arr) {
        return arr[this.integer(0, arr.length - 1)];
    };
    return Random;
}());
exports.default = Random;

},{"seedrandom/seedrandom":19}],7:[function(require,module,exports){
var avatars = require('./avatars').default;
module.exports = avatars;

},{"./avatars":1}],8:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var canvas_1 = require("../helper/canvas");
/**
 * Generated Avatar
 *
 * Contains export methods for formats supported by `node-canvas`.
 */
var Avatar = /** @class */ (function () {
    /**
     * Constructor
     *
     * @param canvas
     */
    function Avatar(canvas) {
        this.canvas = canvas;
    }
    /**
     * Exports the avatar as PNG data url
     *
     * @param options
     */
    Avatar.prototype.getPNG = function (options) {
        if (options === void 0) { options = {}; }
        return this.getDataUrl('image/png', options);
    };
    /**
     * Exports the avatar as JPEG data url
     *
     * @param options
     */
    Avatar.prototype.getJPEG = function (options) {
        if (options === void 0) { options = {}; }
        return this.getDataUrl('image/jpeg', options);
    };
    /**
     * Exports the avatar as GIF data url
     *
     * @param options
     */
    Avatar.prototype.getGIF = function (options) {
        if (options === void 0) { options = {}; }
        return this.getDataUrl('image/gif', options);
    };
    /**
     * Exports the avatar as SVG data url
     *
     * @param options
     */
    Avatar.prototype.getSVG = function (options) {
        if (options === void 0) { options = {}; }
        return this.getDataUrl('image/svg+xml', options);
    };
    /**
     * Exports the avatar in various formats as data url
     *
     * @param format
     * @param options
     */
    Avatar.prototype.getDataUrl = function (format, options) {
        var canvas = this.canvas;
        if (options.background) {
            canvas = this.tintBackground(canvas, options.background);
        }
        if (options.size) {
            canvas = this.resize(canvas, options.size);
        }
        return this.canvas.toDataURL(format);
    };
    /**
     * Resizes the avatar and returns the new canvas
     *
     * @param canvas
     * @param size
     */
    Avatar.prototype.resize = function (canvas, size) {
        var newCanvas = canvas_1.createCanvas();
        newCanvas.width = size;
        newCanvas.height = size;
        var context = newCanvas.getContext('2d');
        context.imageSmoothingEnabled = false;
        context.mozImageSmoothingEnabled = false;
        context.oImageSmoothingEnabled = false;
        context.webkitImageSmoothingEnabled = false;
        context.drawImage(canvas, 0, 0, newCanvas.width, newCanvas.height);
        return newCanvas;
    };
    /**
     * Sets a background color and returns the new canvas
     *
     * @param canvas
     * @param color
     */
    Avatar.prototype.tintBackground = function (canvas, color) {
        var newCanvas = canvas_1.createCanvas();
        newCanvas.width = canvas.width;
        newCanvas.height = canvas.height;
        var context = newCanvas.getContext('2d');
        context.beginPath();
        context.rect(0, 0, newCanvas.width, newCanvas.height);
        context.fillStyle = color;
        context.fill();
        context.drawImage(canvas, 0, 0, newCanvas.width, newCanvas.height);
        return newCanvas;
    };
    return Avatar;
}());
exports.default = Avatar;

},{"../helper/canvas":5}],9:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var hexToRgb = require("pure-color/parse/hex");
var rgbToHsv = require("pure-color/convert/rgb2hsv");
var hsvToRgb = require("pure-color/convert/hsv2rgb");
var Color = /** @class */ (function () {
    function Color(color) {
        if (color instanceof Array) {
            this.rgb = color;
        }
        else {
            this.hex = color;
        }
    }
    Object.defineProperty(Color.prototype, "hsl", {
        /**
         * Get color hsl value
         */
        get: function () {
            return rgbToHsv(this.rgb);
        },
        /**
         * Set color hsl value and calculate rgb
         */
        set: function (hsv) {
            this.rgb = hsvToRgb(hsv);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Color.prototype, "hex", {
        /**
         * Set color hex value and calculate rgb
         */
        set: function (hex) {
            this.rgb = hexToRgb(hex);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Create new color object with same rgb value
     */
    Color.prototype.clone = function () {
        return new Color(this.rgb);
    };
    return Color;
}());
exports.default = Color;

},{"pure-color/convert/hsv2rgb":16,"pure-color/convert/rgb2hsv":17,"pure-color/parse/hex":18}],10:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ColorSet = /** @class */ (function () {
    /**
     * @param colors
     */
    function ColorSet(colors) {
        this.pickedColors = {};
        this.colors = colors;
    }
    /**
     * Returns a color
     *
     * @param random
     */
    ColorSet.prototype.getColor = function (random) {
        if (this.colors instanceof ColorSet) {
            return this.colors.getColor(random);
        }
        else {
            return (this.pickedColors[random.seed] = this.pickedColors[random.seed] || random.pickone(this.colors));
        }
    };
    return ColorSet;
}());
exports.default = ColorSet;

},{}],11:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var canvas_1 = require("../helper/canvas");
var Sprite = /** @class */ (function () {
    /**
     * @param options
     */
    function Sprite(options) {
        this.image = null;
        this.imageError = null;
        this.imageSprites = null;
        // Set default options
        options.chance = options.chance || 100;
        this.options = options;
    }
    /**
     * Loads sprite Image
     */
    Sprite.prototype.load = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (null === _this.image) {
                // Create HTMLImageElement
                _this.image = canvas_1.createImage();
                _this.image.addEventListener('load', function () {
                    _this.imageSprites = Math.floor(_this.image.width / _this.image.height);
                });
                _this.image.addEventListener('error', function (err) {
                    _this.imageError = err.error;
                });
            }
            if (_this.image.src && _this.image.complete) {
                _this.imageError ? reject(_this.imageError) : resolve(_this.image);
            }
            else {
                _this.image.addEventListener('load', function () { return resolve(_this.image); });
                _this.image.addEventListener('error', function (err) { return reject(err.error); });
                _this.image.src = _this.options.src;
            }
        });
    };
    /**
     * Creates an sprite
     *
     * @param random
     */
    Sprite.prototype.create = function (random) {
        if (!this.image.complete) {
            throw new Error('Sprite image not loaded.');
        }
        var canvas = canvas_1.createCanvas();
        var context = canvas.getContext('2d');
        canvas.width = this.image.height;
        canvas.height = this.image.height;
        if (random.bool(this.options.chance)) {
            var color = this.options.colorSet.getColor(random);
            context.drawImage(this.image, random.integer(0, this.imageSprites - 1) * this.image.height * -1, 0);
            this.tintCanvas(canvas, color);
            return canvas;
        }
        else {
            return canvas;
        }
    };
    /**
     * Tints an sprite
     *
     * @param canvas
     * @param color
     */
    Sprite.prototype.tintCanvas = function (canvas, color) {
        var context = canvas.getContext('2d');
        var buffer = context.getImageData(0, 0, canvas.width, canvas.height);
        for (var i = 0; i < buffer.data.length; i += 4) {
            var r = i;
            var g = i + 1;
            var b = i + 2;
            var a = i + 3;
            if (a > 0) {
                buffer.data[r] = Math.round((buffer.data[r] - color.rgb[0]) * (buffer.data[r] / 255) + color.rgb[0]);
                buffer.data[g] = Math.round((buffer.data[g] - color.rgb[1]) * (buffer.data[g] / 255) + color.rgb[1]);
                buffer.data[b] = Math.round((buffer.data[b] - color.rgb[2]) * (buffer.data[b] / 255) + color.rgb[2]);
            }
        }
        context.putImageData(buffer, 0, 0);
    };
    return Sprite;
}());
exports.default = Sprite;

},{"../helper/canvas":5}],12:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

var sprite_1 = require("../model/sprite");
var color_1 = require("../model/color");
var colorSet_1 = require("../model/colorSet");
var difference_1 = require("../color/modifier/lightness/difference");
var darker_1 = require("../color/modifier/lightness/darker");
var femaleSpriteSet = function (random) {
    var base64Prefix = 'data:image/png;base64,';
    var skinColor = new colorSet_1.default([
        new color_1.default('#ffdbac'),
        new color_1.default('#f1c27d'),
        new color_1.default('#e0ac69'),
        new color_1.default('#c68642'),
        new color_1.default('#8d5524')
    ]);
    var hairColor = new difference_1.default(new colorSet_1.default([
        new color_1.default('#090806'),
        new color_1.default('#2c222b'),
        new color_1.default('#71635a'),
        new color_1.default('#b7a69e'),
        new color_1.default('#d6c4c2'),
        new color_1.default('#cabfb1'),
        new color_1.default('#dcd0ba'),
        new color_1.default('#fff5e1'),
        new color_1.default('#e6cea8'),
        new color_1.default('#e5c8a8'),
        new color_1.default('#debc99'),
        new color_1.default('#b89778'),
        new color_1.default('#a56b46'),
        new color_1.default('#b55239'),
        new color_1.default('#8d4a43'),
        new color_1.default('#91553d'),
        new color_1.default('#533d32'),
        new color_1.default('#3b3024'),
        new color_1.default('#554838'),
        new color_1.default('#4e433f'),
        new color_1.default('#504444'),
        new color_1.default('#6a4e42'),
        new color_1.default('#a7856a'),
        new color_1.default('#977961')
    ]), skinColor, 12);
    var spriteSet = {
        face: new sprite_1.default({
            src: base64Prefix + "iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAVElEQVQ4jdXTQQoAIAgEwK3//7muZSoqCuYx2CFRge41hPcVzXOgFWMNCnqxx5lBQKx08Gw52u5llf4Q6DiU8j30oqZLsaJsVgMlWM38N5R+e5gObtcgCxr27O7iAAAAAElFTkSuQmCC",
            colorSet: skinColor
        }),
        eyes: new sprite_1.default({
            src: base64Prefix + "iVBORw0KGgoAAAANSUhEUgAAAQQAAAAUCAYAAABrqUMlAAAAxElEQVR4nO3UwQ2DMAwFUGfZ7MRO7JQeSiQOOCWIVkV674LEl4NxAhEAAAAAAAAA92s7M9lT1+t1M/efrLXWaq3p/LLsV/79vPQZreuazu8o+1V/vW5ZlvRMZ9mwwYhIGzzKRuv10pnsSn+7ePZAZzWXNuPO+fW6pGa6v1pri4i2XU9nn3q7a3/j/Z7pfsyu943zF8mMRllm+3kc9jDKRv1tH/xhf1kWEVHOPgSeav8xlVLK2eyp6wEAAAAAAAAAAAD8pxdjf6lL3r4/CwAAAABJRU5ErkJggg==",
            colorSet: new colorSet_1.default([
                new color_1.default('#76778b'),
                new color_1.default('#697b94'),
                new color_1.default('#647b90'),
                new color_1.default('#5b7c8b'),
                new color_1.default('#588387')
            ])
        }),
        eyebrows: new sprite_1.default({
            src: base64Prefix + "iVBORw0KGgoAAAANSUhEUgAAAQQAAAAUCAYAAABrqUMlAAAAjUlEQVR4nO3UWwqEMAwAQO9/6for4qN5uKswAyKYtKY1dlkAAAAAgC8Zk89+bqaITKEdCx6bq5JzlJ+Nn43JxKI1ZGq7q+GfTTi7nsz3vdq/jj6szpWNR/LD9UVfHLXfwMr4jtwn1jt299lYtIbKHJ0/SGdDv73/np6v6q0HPQAAAAAAAAAAAAAAAMC5FfyBT7GLnPoYAAAAAElFTkSuQmCC",
            colorSet: new darker_1.default(new darker_1.default(hairColor, skinColor, 5), hairColor, 7)
        }),
        mouth: new sprite_1.default({
            src: base64Prefix + "iVBORw0KGgoAAAANSUhEUgAAAQQAAAAUCAYAAABrqUMlAAAAdElEQVR4nO3UQQqAMAxFQe+U+5+trgoiuvIXg86A20fSSrcNAAAAAAAAAAAAAODTxtsD3Bin77GqSu8am+2i26Fx1Ux2V51fSvt9u//Q7XvhR6H9vsHemELNUVXzPmIzLmjF9g00oJXOD9axCQAAAAAA8FM7aHY9KjKubf4AAAAASUVORK5CYII=",
            colorSet: new darker_1.default([
                new color_1.default('#dbac98'),
                new color_1.default('#d29985'),
                new color_1.default('#c98276'),
                new color_1.default('#e35d6a'),
                new color_1.default('#e32153'),
                new color_1.default('#de0f0d')
            ], skinColor, 5)
        }),
        accessories: new sprite_1.default({
            src: base64Prefix + "iVBORw0KGgoAAAANSUhEUgAAAFAAAAAUCAYAAAAa2LrXAAAAUUlEQVRYhe3QsQ3AMAgEQLKs99+AtC6SAkOT6E6isfSPRQQAANCSw9nRvrXWcd9DNrep6mTLiyazk3358l7pyoiI6/RHH7cfrnqDThYAgJ+4ASmZGFLEUrkXAAAAAElFTkSuQmCC",
            chance: 15,
            colorSet: new colorSet_1.default([
                new color_1.default('#daa520'),
                new color_1.default('#ffd700'),
                new color_1.default('#eee8aa'),
                new color_1.default('#fafad2'),
                new color_1.default('#d3d3d3'),
                new color_1.default('#a9a9a9')
            ])
        }),
        glasses: new sprite_1.default({
            src: base64Prefix + "iVBORw0KGgoAAAANSUhEUgAAAIwAAAAUCAYAAABf9dUQAAAApklEQVRoge3TUQ6DIBCEYfZK7pW8Vc/UM40vPFCKsE0Rm/T/EhJxYJQYUwIAAAAArKXGiGTRzk+yFWafd2qfu5frlOfDbFT2MtxdvWzUJ2nLY6/7WtnqPs4bP681eiXJ8/VmZo9iXS87U+5JZvY86auzO/r+4ryNexbI3iczChf01fvq9b1sRd/sDzz7/b7qiz4AcVf8IFdQ59m9DAAAAAAAAMCvOQDYlS61XG8FjAAAAABJRU5ErkJggg==",
            chance: 25,
            colorSet: new colorSet_1.default([
                new color_1.default('#5f705c'),
                new color_1.default('#43677d'),
                new color_1.default('#5e172d'),
                new color_1.default('#ffb67a'),
                new color_1.default('#a04b5d'),
                new color_1.default('#191919'),
                new color_1.default('#323232'),
                new color_1.default('#4b4b4b')
            ])
        }),
        clothes: new sprite_1.default({
            src: base64Prefix + "iVBORw0KGgoAAAANSUhEUgAAAQQAAAAUCAYAAABrqUMlAAABlUlEQVR4nO3XQXLDIAyFYWWmN9KdlDOZO3EmurEcTAGDQzpZ/N9MN+RZTpGRWxEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIDv8qispQU1DqqaRERijK182nOy57r19vxVZjY7kpu5r+elck1rvSrfP1X1ffRrk6+N7p+ZnfobQnjMfN76fn7/Vj3v/2B/XSs7kimzX5lT1aSqoqryfD6r2W3bUoxR9p+Z/XOPgc+qX3Z2GLTqiMjrYRE5DYQ8n7KsZNneL726cZ5dPYhyrYYMHTaXH/yLtWrd8rCP6gyFUz0zO+X9fiGE8rqheo3sSKaVfTeXZ99+/lQ1ef9aQ6EYBv5S+Fh/f+4UuCN7u4kUDSgf6EG9A3pnY1bVq2Vb13eHjKpKCOHYn2IPjzUXYxQz+5MpVQ5olR/wUSEEMbPTgzl6r458j+6+sGq18rVVtW7VzPu1bVvyoVAOgysL9vr/BoLI7YPfs7LBn6j3NjM7DlrtrwGR1+CYPcCfUHsos39n7pZd2YOvHDDlUPC10WEgMj/AXd6zX//a6/txl4UqAAAAAElFTkSuQmCC",
            colorSet: new colorSet_1.default([
                new color_1.default('#d11141'),
                new color_1.default('#00b159'),
                new color_1.default('#00aedb'),
                new color_1.default('#f37735'),
                new color_1.default('#ffc425'),
                new color_1.default('#740001'),
                new color_1.default('#ae0001'),
                new color_1.default('#eeba30'),
                new color_1.default('#96ceb4'),
                new color_1.default('#ffeead'),
                new color_1.default('#ff6f69'),
                new color_1.default('#ffcc5c'),
                new color_1.default('#88d8b0')
            ])
        }),
        hair: new sprite_1.default({
            src: base64Prefix + "iVBORw0KGgoAAAANSUhEUgAAAQQAAAAUCAYAAABrqUMlAAACE0lEQVR4nO2a23LDIAxEk0z+/5fdlybjUoNuKxDjPS+ZKWi9ICzjmseDEEJ+ea424OAw9pfGeBe9Q9EHEROl6vzdQq8Vt4r1dFq0uujBSrqH0G7tn+VPimn7ofI6uqZHe1V+rdeukN8leqNF5RZtyHrCHZ3fUcxVm/XJ14tDz5+2GPT6Z/vzakbWSS/vV7roHdGs/GrnJ8Xf22Cox8iIx+TVjX3mKfy2fa03lgRaE1UwNb7Oc6spqA/h71pv5/6jwq2Zu16+ez4t+ZDm0Krb07IWg0/bOU57n4z45+OqIKDJvkHuhDSXngU9KqgWNN4yGI15dcHX5kOrqdEL+XsZglfCIlH7H8CVvSHxFphRm1UzuisYxryaBq9g9oJA6EvvYBZm3wCo66EXtFcTrRN9VVihhwbib5cdAoJdn2KVfVf2RhycC0JkW569pc/QrzzeO4LORyW9GUDGu8sOIeOVgcSovDtA5PqW66UtCN7PhDuA+o6+y3h3BJ0PpJ7lC070Wp4Yr78/ny9n7BAsJjV9q+uRGNXzu7IopI83+xwC6pNKa1w6lHEVI/XNOlZL7ETz4X2d0RysynhVQqw/j7/PruJ7/RkHkxBcbYesR4jbSUd+//XoSXEZi3onso6IR6g+t+GDWO+mYZYJK4hFUD2ZpC6aJ7gF9HmQqL/R0fWyfLY2s+LIPI7md1YsIYQQQgghhBA9P5+4njKanBJ6AAAAAElFTkSuQmCC",
            chance: 95,
            colorSet: hairColor
        }),
        hat: new sprite_1.default({
            src: base64Prefix + "iVBORw0KGgoAAAANSUhEUgAAAPAAAAAUCAYAAACzgLAGAAABB0lEQVR4nO3XwQ2DMAxAUVOxUXZiKHZiJnohyEXgJDgplP4noXKwjTEkoiKf5pPHEeo56oUQ1hh9bh1LnKu/eC11TbPeUZ9G/67+do6/rfcyintZjZ/JvXs9EREJIZz63akzT9O0xsRzi4prfr+JjcLkyS1w+fuinm2z59FXKKbzu0r1Yo0uGXUPc+4iS+R3Iu7FG89/an4lwXrT22xYWe9fzE/Mten8jjbuXLH3PhH3VLfeYCos3hZtaZfOz3t/X5iPeZ0aXyDLJt/9yg5dmx5g6Qw8uU+hvziK5+fIfYRhGNZ3aBzHohlsc1v+BwbQGAsYAAAAAAAAAAAAAAAAAAAAAAAAQJ439bEi7H2w66EAAAAASUVORK5CYII=",
            chance: 5,
            colorSet: new colorSet_1.default([
                new color_1.default('#cc6192'),
                new color_1.default('#2663a3'),
                new color_1.default('#a62116'),
                new color_1.default('#3d8a6b'),
                new color_1.default('#614f8a')
            ])
        })
    };
    return Promise.resolve(spriteSet);
};
exports.default = femaleSpriteSet;

},{"../color/modifier/lightness/darker":3,"../color/modifier/lightness/difference":4,"../model/color":9,"../model/colorSet":10,"../model/sprite":11}],13:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

var sprite_1 = require("../model/sprite");
var color_1 = require("../model/color");
var colorSet_1 = require("../model/colorSet");
var identiconSpriteSet = function (random) {
    var base64Prefix = 'data:image/png;base64,';
    // Thanks to [materialui.co](https://www.materialui.co/colors)
    var color = new colorSet_1.default([
        new color_1.default('#e57373'),
        new color_1.default('#F06292'),
        new color_1.default('#BA68C8'),
        new color_1.default('#9575CD'),
        new color_1.default('#7986CB'),
        new color_1.default('#64B5F6'),
        new color_1.default('#4FC3F7'),
        new color_1.default('#4DD0E1'),
        new color_1.default('#4DB6AC'),
        new color_1.default('#81C784'),
        new color_1.default('#AED581'),
        new color_1.default('#DCE775'),
        new color_1.default('#FFF176'),
        new color_1.default('#FFD54F'),
        new color_1.default('#FFB74D'),
        new color_1.default('#FF8A65')
    ]);
    var spriteSet = {
        1: new sprite_1.default({
            src: base64Prefix + "iVBORw0KGgoAAAANSUhEUgAAACMAAAAFCAYAAADPLFVyAAAAJklEQVQokWNgGAWjgDTAyMDA8B9Kw8B/NHFc8sh8dPMI2QdjowAA0ygIAg1NKAIAAAAASUVORK5CYII=",
            colorSet: color
        }),
        2: new sprite_1.default({
            src: base64Prefix + "iVBORw0KGgoAAAANSUhEUgAAACMAAAAFCAYAAADPLFVyAAAAJklEQVQokWNgGAVDADAyMDD8h9Iw8B9NHJc8Mh/dPEL2wdiDFwAAPAAIArVXVZkAAAAASUVORK5CYII=",
            colorSet: color
        }),
        3: new sprite_1.default({
            src: base64Prefix + "iVBORw0KGgoAAAANSUhEUgAAACMAAAAFCAYAAADPLFVyAAAAJklEQVQokWNgGAXYASMDA8N/KA0D/9HEcckj89HNI2QfjD0KiAIApMkIAqp2PYAAAAAASUVORK5CYII=",
            colorSet: color
        }),
        4: new sprite_1.default({
            src: base64Prefix + "iVBORw0KGgoAAAANSUhEUgAAACMAAAAFCAYAAADPLFVyAAAAJklEQVQokWNgGESAkYGB4T+UhoH/aOK45JH56OYRsg/GHgVDDwAADaEIAgrqvcEAAAAASUVORK5CYII=",
            colorSet: color
        }),
        5: new sprite_1.default({
            src: base64Prefix + "iVBORw0KGgoAAAANSUhEUgAAACMAAAAFCAYAAADPLFVyAAAAK0lEQVQokWNkYGD4z8DAwMiAADA+Oo0uj8yHAUY0PjpAlmfEo24UjAKiAAB2aggCS7GwbAAAAABJRU5ErkJggg==",
            colorSet: color
        })
    };
    return Promise.resolve(spriteSet);
};
exports.default = identiconSpriteSet;

},{"../model/color":9,"../model/colorSet":10,"../model/sprite":11}],14:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

var sprite_1 = require("../model/sprite");
var color_1 = require("../model/color");
var colorSet_1 = require("../model/colorSet");
var difference_1 = require("../color/modifier/lightness/difference");
var brighter_1 = require("../color/modifier/lightness/brighter");
var darker_1 = require("../color/modifier/lightness/darker");
var maleSpriteSet = function (random) {
    var base64Prefix = 'data:image/png;base64,';
    var skinColor = new colorSet_1.default([
        new color_1.default('#ffdbac'),
        new color_1.default('#f1c27d'),
        new color_1.default('#e0ac69'),
        new color_1.default('#c68642'),
        new color_1.default('#8d5524')
    ]);
    var hairColor = new difference_1.default([
        new color_1.default('#090806'),
        new color_1.default('#2c222b'),
        new color_1.default('#71635a'),
        new color_1.default('#b7a69e'),
        new color_1.default('#b89778'),
        new color_1.default('#a56b46'),
        new color_1.default('#b55239'),
        new color_1.default('#8d4a43'),
        new color_1.default('#91553d'),
        new color_1.default('#533d32'),
        new color_1.default('#3b3024'),
        new color_1.default('#554838'),
        new color_1.default('#4e433f'),
        new color_1.default('#504444'),
        new color_1.default('#6a4e42'),
        new color_1.default('#a7856a'),
        new color_1.default('#977961')
    ], skinColor, 12);
    var spriteSet = {
        face: new sprite_1.default({
            src: base64Prefix + "iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAS0lEQVQ4jWNgGOyAEYf4f3L1YzOQWMOwmoFuIKmGYZjDRKYBOAHVDUT2MrneRTFraHmZgWHExTIMUDWnkGooUXmZkOF49YwWDpQDANohChvs8TZPAAAAAElFTkSuQmCC",
            colorSet: skinColor
        }),
        eyes: new sprite_1.default({
            src: base64Prefix + "iVBORw0KGgoAAAANSUhEUgAAAQQAAAAUCAYAAABrqUMlAAAAxElEQVR4nO3UwQ2DMAwFUGfZ7MRO7JQeSiQOOCWIVkV674LEl4NxAhEAAAAAAAAA92s7M9lT1+t1M/efrLXWaq3p/LLsV/79vPQZreuazu8o+1V/vW5ZlvRMZ9mwwYhIGzzKRuv10pnsSn+7ePZAZzWXNuPO+fW6pGa6v1pri4i2XU9nn3q7a3/j/Z7pfsyu943zF8mMRllm+3kc9jDKRv1tH/xhf1kWEVHOPgSeav8xlVLK2eyp6wEAAAAAAAAAAAD8pxdjf6lL3r4/CwAAAABJRU5ErkJggg==",
            colorSet: new colorSet_1.default([
                new color_1.default('#76778b'),
                new color_1.default('#697b94'),
                new color_1.default('#647b90'),
                new color_1.default('#5b7c8b'),
                new color_1.default('#588387')
            ])
        }),
        eyebrows: new sprite_1.default({
            src: base64Prefix + "iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAHUlEQVQ4jWNgGAVDBvynkhrSFJKodhSMglEwkgEAp6ED/bRBxw4AAAAASUVORK5CYII=",
            colorSet: new darker_1.default(new darker_1.default(hairColor, skinColor, 5), hairColor, 7)
        }),
        mustache: new sprite_1.default({
            src: base64Prefix + "iVBORw0KGgoAAAANSUhEUgAAANwAAAAUCAYAAADm4VNYAAAA+ElEQVR4nO3ZwQ7CIAyA4Wp8bI+89zzNzM1BC4UV/b9kJ6FjQFcyRQAAAAAAAAAAABDAMqjPr0qD+qjdewYH8ImEi89SsahuR5aK1bW6iRwTbtlcJZq2HIl8aNejJG0uj7bhjmwN9xwyrkfmN6+Nv4jIzdB2ZrXj18yP99x4bbAkIs/B96zhce/aGO/5ySWcp9kTCXlXJtJUvr1ZrclRejt7x4su+vxZk6NUvbzjeQv1vGeLo11k76NibbKt8VuT9Wyc1rjR50+7abyPirXJtsZv7V/S/XmvqCb7zROtojG+NvvNOLqilUQf31/SfqkFTPgfDgAAAI1ePdA5SBvHuo0AAAAASUVORK5CYII=",
            chance: 50,
            colorSet: new darker_1.default(new brighter_1.default(hairColor, hairColor, 15), skinColor, 5)
        }),
        mouth: new sprite_1.default({
            src: base64Prefix + "iVBORw0KGgoAAAANSUhEUgAAANwAAAAUCAYAAADm4VNYAAAAdklEQVR4nO3UywqAIBAF0Ab6/1+eNi2kRc8xg87ZiCDXK4rTBAAAAAAAAAAAAPBfMXDvHLz/G3qdMdexV/Zn7iUzs51HxNNubV7VOU9nzhcCKy8hj5fcyqvouO32JDOK83qo7tfjQVdqO1W86099UAAAAAAA+xYj7xMHNiFSXAAAAABJRU5ErkJggg==",
            colorSet: new darker_1.default([new color_1.default('#eec1ad'), new color_1.default('#dbac98'), new color_1.default('#d29985')], skinColor, 5)
        }),
        glasses: new sprite_1.default({
            src: base64Prefix + "iVBORw0KGgoAAAANSUhEUgAAAHgAAAAUCAYAAABGUvnzAAAAmElEQVRoge3V0Q3DIAxFUbxSvFK36kyd6fWHjxQ5Tqu6pEL3SEgRhkcQEWkNAAAAwGdswhpK1s1q72aO47PaDNX7rctzd/VJL83dldXO8iRtvd3GvKg2O2/l/UanLUnenzczu+/GZbUj+znNzB4HeWPtirzl9hsecND3H1dMnFlxRVfmVR/wV+93xT9qdb/4oAEAAAAAAPAEmLbyGT/XnVYAAAAASUVORK5CYII=",
            chance: 25,
            colorSet: new colorSet_1.default([
                new color_1.default('#5f705c'),
                new color_1.default('#43677d'),
                new color_1.default('#5e172d'),
                new color_1.default('#ffb67a'),
                new color_1.default('#a04b5d'),
                new color_1.default('#191919'),
                new color_1.default('#323232'),
                new color_1.default('#4b4b4b')
            ])
        }),
        clothes: new sprite_1.default({
            src: base64Prefix + "iVBORw0KGgoAAAANSUhEUgAAAQQAAAAUCAYAAABrqUMlAAABe0lEQVR4nO3XbY7CIBCA4WmyN4Iz9VCcCc6EP7YY5GugsmtM3icxahmHj8KoIgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfFycvIbvFYvH0NFJsKKVY5SvjNfa/yWfMUZEREIIzXyD9iqfMUZCCHI9V/mU9hfe+2itFe+9WGubsTMxiTEmXvPIL6fPxCxOrrjp+9GajzEmdvrqjk9bm5mY5DzPaj8751JbFe+cm1q/JIQgMf5eOo7juW5Z++p+1iyNT1OOTztMs3qD3JpvdbKJtrGu1yl25n13vsVhn33uHnQRkXTYR/KYXlForV9xWKsNfcUs3Y8Ur7X38q0UhFG+UTHIYqrP9YpCqxh04qSIU89Ha90Hff3Z+fi5k+BTejfgnXyLheB5kFtuFoOpsVpr7090IB+DtikXcm7527ErT+48z+EvhBX5fRR53U+reWb7elfeVyvfVxWEuxt2dyEZ9bO7KIwKQb6hnXNTvySwV74n3y2o2pfSDtpZeAAqEzJHfLIZ6QAAAABJRU5ErkJggg==",
            colorSet: new colorSet_1.default([
                new color_1.default('#5bc0de'),
                new color_1.default('#5cb85c'),
                new color_1.default('#428bca'),
                new color_1.default('#03396c'),
                new color_1.default('#005b96'),
                new color_1.default('#6497b1'),
                new color_1.default('#1b85b8'),
                new color_1.default('#5a5255'),
                new color_1.default('#559e83'),
                new color_1.default('#ae5a41'),
                new color_1.default('#c3cb71'),
                new color_1.default('#666547'),
                new color_1.default('#ffe28a')
            ])
        }),
        hair: new sprite_1.default({
            src: base64Prefix + "iVBORw0KGgoAAAANSUhEUgAAAQQAAAAUCAYAAABrqUMlAAABkklEQVR4nO2XWW7DMAwFlaL3v7L70aQIVIqbaFluZ4AgiS0/UgsXtwZQz/H8/FXe53cMrvf3JA1rjOd+KY+VxiDF0b736fXdBr9fB+fqPe0P8NX+VBMNUG3+Ea0l6ygZqZxwVNM76Z31+sCUtL0B3Ae7hZQwLHYM4B33Nxq8R/e/14rsq6Q94+tQQ3JUum4ZrlpIj+2+OmoansA4K+Nba6uN1Z7L2LbYpbtoTU5Q2h6t2t9R4tTOmOc8eGxbWpZub2OoNcpcEbwLIjk2GqvpWQsbmVP2/czTWUUPqqWZ6U7uhjVfqwCcxUwXJc0pmgx6rVGFjyaDX7Y/E04NxSbHz7RQM2SrqaQTCUhrfCa4s2u4E9p8rc7wbLLxUeXvS8ujp8VZG2l8JJyK0DtlLejs/apnsjyC9rTxd63yK4iuc4W9Ko1sd9CP9SROjw68kcncd6/AcD1H81d67flyzu4Qdmf3jgNgKf89IQBcyXbFhYQAAD+QEADuySndBQkBYD3bvSoAAAAAAAAAAAAAAAAAABTxBbb7ZiKCSz60AAAAAElFTkSuQmCC",
            chance: 95,
            colorSet: hairColor
        }),
        hat: new sprite_1.default({
            src: base64Prefix + "iVBORw0KGgoAAAANSUhEUgAAAPAAAAAUCAYAAACzgLAGAAAA6UlEQVR4nO3WXRKDIAxG0TjjjrL/JbAm+yKMowgBpAV7z1O18hki/ixytUX2pSyZ/0fPs+aaclS1qD7nXDL36Tzp2D9VFedcc47loMO5mubrc36YZ8q9y1mN4aMoXXx+zBOL2pIztNKHwW6zPBQyN6/IC/onA66/9XRADT+u98Wprc+PvauvJDebk1nEqfN3719FbWGsJOZtuHlNOTWFSWP/Cnry9fWnquH3Xucl57jRUuA5a4a81typ5lv59g0Sb+G/6J81L/IJfZdXlBsx+9cMAAAAAAAAAAAAAAAAAAAAAAAAAAAA8HofWtFqMeek3YkAAAAASUVORK5CYII=",
            chance: 5,
            colorSet: new colorSet_1.default([
                new color_1.default('#18293b'),
                new color_1.default('#2e1e05'),
                new color_1.default('#989789'),
                new color_1.default('#3d6ba7'),
                new color_1.default('#517459'),
                new color_1.default('#a62116')
            ])
        })
    };
    return Promise.resolve(spriteSet);
};
exports.default = maleSpriteSet;

},{"../color/modifier/lightness/brighter":2,"../color/modifier/lightness/darker":3,"../color/modifier/lightness/difference":4,"../model/color":9,"../model/colorSet":10,"../model/sprite":11}],15:[function(require,module,exports){

},{}],16:[function(require,module,exports){
function hsv2rgb(hsv) {
  var h = hsv[0] / 60,
      s = hsv[1] / 100,
      v = hsv[2] / 100,
      hi = Math.floor(h) % 6;

  var f = h - Math.floor(h),
      p = 255 * v * (1 - s),
      q = 255 * v * (1 - (s * f)),
      t = 255 * v * (1 - (s * (1 - f))),
      v = 255 * v;

  switch(hi) {
    case 0:
      return [v, t, p];
    case 1:
      return [q, v, p];
    case 2:
      return [p, v, t];
    case 3:
      return [p, q, v];
    case 4:
      return [t, p, v];
    case 5:
      return [v, p, q];
  }
}

module.exports = hsv2rgb;
},{}],17:[function(require,module,exports){
function rgb2hsv(rgb) {
  var r = rgb[0],
      g = rgb[1],
      b = rgb[2],
      min = Math.min(r, g, b),
      max = Math.max(r, g, b),
      delta = max - min,
      h, s, v;

  if (max == 0)
    s = 0;
  else
    s = (delta/max * 1000)/10;

  if (max == min)
    h = 0;
  else if (r == max)
    h = (g - b) / delta;
  else if (g == max)
    h = 2 + (b - r) / delta;
  else if (b == max)
    h = 4 + (r - g) / delta;

  h = Math.min(h * 60, 360);

  if (h < 0)
    h += 360;

  v = ((max / 255) * 1000) / 10;

  return [h, s, v];
}

module.exports = rgb2hsv;
},{}],18:[function(require,module,exports){
function expand(hex) {
  var result = "#";

  for (var i = 1; i < hex.length; i++) {
    var val = hex.charAt(i);
    result += val + val;
  }

  return result;
}

function hex(hex) {
  // #RGB or #RGBA
  if(hex.length === 4 || hex.length === 5) {
    hex = expand(hex);
  }

  var rgb = [
    parseInt(hex.substring(1,3), 16),
    parseInt(hex.substring(3,5), 16),
    parseInt(hex.substring(5,7), 16)
  ];

  // #RRGGBBAA
  if (hex.length === 9) {
    var alpha = parseFloat((parseInt(hex.substring(7,9), 16) / 255).toFixed(2));
    rgb.push(alpha);
  }

  return rgb;
}

module.exports = hex;
},{}],19:[function(require,module,exports){
/*
Copyright 2014 David Bau.

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

*/

(function (pool, math) {
//
// The following constants are related to IEEE 754 limits.
//
var global = this,
    width = 256,        // each RC4 output is 0 <= x < 256
    chunks = 6,         // at least six RC4 outputs for each double
    digits = 52,        // there are 52 significant digits in a double
    rngname = 'random', // rngname: name for Math.random and Math.seedrandom
    startdenom = math.pow(width, chunks),
    significance = math.pow(2, digits),
    overflow = significance * 2,
    mask = width - 1,
    nodecrypto;         // node.js crypto module, initialized at the bottom.

//
// seedrandom()
// This is the seedrandom function described above.
//
function seedrandom(seed, options, callback) {
  var key = [];
  options = (options == true) ? { entropy: true } : (options || {});

  // Flatten the seed string or build one from local entropy if needed.
  var shortseed = mixkey(flatten(
    options.entropy ? [seed, tostring(pool)] :
    (seed == null) ? autoseed() : seed, 3), key);

  // Use the seed to initialize an ARC4 generator.
  var arc4 = new ARC4(key);

  // This function returns a random double in [0, 1) that contains
  // randomness in every bit of the mantissa of the IEEE 754 value.
  var prng = function() {
    var n = arc4.g(chunks),             // Start with a numerator n < 2 ^ 48
        d = startdenom,                 //   and denominator d = 2 ^ 48.
        x = 0;                          //   and no 'extra last byte'.
    while (n < significance) {          // Fill up all significant digits by
      n = (n + x) * width;              //   shifting numerator and
      d *= width;                       //   denominator and generating a
      x = arc4.g(1);                    //   new least-significant-byte.
    }
    while (n >= overflow) {             // To avoid rounding up, before adding
      n /= 2;                           //   last byte, shift everything
      d /= 2;                           //   right using integer math until
      x >>>= 1;                         //   we have exactly the desired bits.
    }
    return (n + x) / d;                 // Form the number within [0, 1).
  };

  prng.int32 = function() { return arc4.g(4) | 0; }
  prng.quick = function() { return arc4.g(4) / 0x100000000; }
  prng.double = prng;

  // Mix the randomness into accumulated entropy.
  mixkey(tostring(arc4.S), pool);

  // Calling convention: what to return as a function of prng, seed, is_math.
  return (options.pass || callback ||
      function(prng, seed, is_math_call, state) {
        if (state) {
          // Load the arc4 state from the given state if it has an S array.
          if (state.S) { copy(state, arc4); }
          // Only provide the .state method if requested via options.state.
          prng.state = function() { return copy(arc4, {}); }
        }

        // If called as a method of Math (Math.seedrandom()), mutate
        // Math.random because that is how seedrandom.js has worked since v1.0.
        if (is_math_call) { math[rngname] = prng; return seed; }

        // Otherwise, it is a newer calling convention, so return the
        // prng directly.
        else return prng;
      })(
  prng,
  shortseed,
  'global' in options ? options.global : (this == math),
  options.state);
}
math['seed' + rngname] = seedrandom;

//
// ARC4
//
// An ARC4 implementation.  The constructor takes a key in the form of
// an array of at most (width) integers that should be 0 <= x < (width).
//
// The g(count) method returns a pseudorandom integer that concatenates
// the next (count) outputs from ARC4.  Its return value is a number x
// that is in the range 0 <= x < (width ^ count).
//
function ARC4(key) {
  var t, keylen = key.length,
      me = this, i = 0, j = me.i = me.j = 0, s = me.S = [];

  // The empty key [] is treated as [0].
  if (!keylen) { key = [keylen++]; }

  // Set up S using the standard key scheduling algorithm.
  while (i < width) {
    s[i] = i++;
  }
  for (i = 0; i < width; i++) {
    s[i] = s[j = mask & (j + key[i % keylen] + (t = s[i]))];
    s[j] = t;
  }

  // The "g" method returns the next (count) outputs as one number.
  (me.g = function(count) {
    // Using instance members instead of closure state nearly doubles speed.
    var t, r = 0,
        i = me.i, j = me.j, s = me.S;
    while (count--) {
      t = s[i = mask & (i + 1)];
      r = r * width + s[mask & ((s[i] = s[j = mask & (j + t)]) + (s[j] = t))];
    }
    me.i = i; me.j = j;
    return r;
    // For robust unpredictability, the function call below automatically
    // discards an initial batch of values.  This is called RC4-drop[256].
    // See http://google.com/search?q=rsa+fluhrer+response&btnI
  })(width);
}

//
// copy()
// Copies internal state of ARC4 to or from a plain object.
//
function copy(f, t) {
  t.i = f.i;
  t.j = f.j;
  t.S = f.S.slice();
  return t;
};

//
// flatten()
// Converts an object tree to nested arrays of strings.
//
function flatten(obj, depth) {
  var result = [], typ = (typeof obj), prop;
  if (depth && typ == 'object') {
    for (prop in obj) {
      try { result.push(flatten(obj[prop], depth - 1)); } catch (e) {}
    }
  }
  return (result.length ? result : typ == 'string' ? obj : obj + '\0');
}

//
// mixkey()
// Mixes a string seed into a key that is an array of integers, and
// returns a shortened string seed that is equivalent to the result key.
//
function mixkey(seed, key) {
  var stringseed = seed + '', smear, j = 0;
  while (j < stringseed.length) {
    key[mask & j] =
      mask & ((smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++));
  }
  return tostring(key);
}

//
// autoseed()
// Returns an object for autoseeding, using window.crypto and Node crypto
// module if available.
//
function autoseed() {
  try {
    var out;
    if (nodecrypto && (out = nodecrypto.randomBytes)) {
      // The use of 'out' to remember randomBytes makes tight minified code.
      out = out(width);
    } else {
      out = new Uint8Array(width);
      (global.crypto || global.msCrypto).getRandomValues(out);
    }
    return tostring(out);
  } catch (e) {
    var browser = global.navigator,
        plugins = browser && browser.plugins;
    return [+new Date, global, plugins, global.screen, tostring(pool)];
  }
}

//
// tostring()
// Converts an array of charcodes to a string
//
function tostring(a) {
  return String.fromCharCode.apply(0, a);
}

//
// When seedrandom.js is loaded, we immediately mix a few bits
// from the built-in RNG into the entropy pool.  Because we do
// not want to interfere with deterministic PRNG state later,
// seedrandom will not call math.random on its own again after
// initialization.
//
mixkey(math.random(), pool);

//
// Nodejs and AMD support: export the implementation as a module using
// either convention.
//
if ((typeof module) == 'object' && module.exports) {
  module.exports = seedrandom;
  // When in node.js, try using crypto package for autoseeding.
  try {
    nodecrypto = require('crypto');
  } catch (ex) {}
} else if ((typeof define) == 'function' && define.amd) {
  define(function() { return seedrandom; });
}

// End anonymous scope, and pass initial values.
})(
  [],     // pool: entropy pool starts empty
  Math    // math: package containing random, pow, and seedrandom
);

},{"crypto":15}]},{},[7])(7)
});